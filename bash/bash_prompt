#!/bin/bash
# bash_prompt

# Example:
# kevva@host: ~/.dotfiles on master [+!?$ab]
# $

# Git status information
prompt_git() {
	local s=""
	local branchName=""

	# Check if the current directory is in a git repository
	if [[ $(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?) == 0 ]]; then
		# Check if the current directory is in .git before running git checks
		if [[ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]]; then
			# Ensure index is up to date
			git update-index --really-refresh -q &>/dev/null

			# Check for uncommitted changes in the index
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+="+";
			fi

			# Check for unstaged changes
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+="!";
			fi

			# Check for untracked files
			if [[ -n "$(git ls-files --others --exclude-standard)" ]]; then
				s+="?";
			fi

			# Check for stashed files
			if $(git rev-parse --verify refs/stash &> /dev/null); then
				s+="$";
			fi

			# Check if branch is behind remote
			if [[ $(git rev-list --right-only --count HEAD...@'{u}' 2> /dev/null) -gt 0 ]]; then
				s+="b"
			fi

			# Check if branch is ahead of remote
			if [[ $(git rev-list --left-only --count HEAD...@'{u}' 2> /dev/null) -gt 0 ]]; then
				s+="a"
			fi
		fi

		# Get the short symbolic ref
		# If HEAD isn't a symbolic ref, get the short SHA
		# Otherwise, just give up
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
					  git rev-parse --short HEAD 2> /dev/null || \
					  printf "(unknown)")"

		[[ -n "$s" ]] && s=" [${s}]"

		printf "%s" "$1${branchName}${s}"
	else
		return
	fi
}

# Set colors
set_prompts() {
	tput sgr0

	readonly bold=$(tput bold)
	readonly reset=$(tput sgr0)
	readonly black=$(tput setaf 0)
	readonly blue=$(tput setaf 33)
	readonly cyan=$(tput setaf 37)
	readonly green=$(tput setaf 64)
	readonly orange=$(tput setaf 166)
	readonly purple=$(tput setaf 125)
	readonly red=$(tput setaf 1)
	readonly white=$(tput setaf 15)
	readonly yellow=$(tput setaf 136)

	local hostStyle=""
	local userStyle=""

	# Logged in as root
	if [[ "$USER" == "root" ]]; then
		userStyle="$bold$red"
	else
		userStyle="$orange"
	fi

	# Connected via ssh
	if [[ "$SSH_TTY" ]]; then
		hostStyle="$bold$red"
	else
		hostStyle="$yellow"
	fi

	# Set the terminal title to the current working directory
	PS1="\[\033]0;\w\007\]"

	# Build the prompt
	PS1+="\n" # Newline
	PS1+="\[$userStyle\]\u" # Username
	PS1+="\[$reset$white\]@" # @
	PS1+="\[$hostStyle\]\h" # Host
	PS1+="\[$reset$white\]: " # :
	PS1+="\[$green\]\w" # Working directory
	PS1+="\$(prompt_git \"$white on $cyan\")" # Git repository details
	PS1+="\n" # Newline
	PS1+="\[$reset$white\]$ \[$reset\]" # $ (and reset color)

	export PS1
}

set_prompts
unset set_prompts
