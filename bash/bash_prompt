#!/bin/bash

# bash_prompt

# Based on @gf3â€™s Sexy Bash Prompt: https://github.com/gf3/dotfiles
# More tips: http://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html
#
# OS X
# iTerm2 prefs: import Solarized theme (disable bright colors for bold text)
#
# Windows
# Console2 prefs: import Solarized theme

# Example:
# kevva@host: ~/.dotfiles on master[!?]
# $

# Check that terminfo exists before changing TERM var to xterm-256color
# Prevents prompt flashing in Mac OS X 10.6 Terminal.app
if [ -e /usr/share/terminfo/x/xterm-256color ]; then
  export TERM='xterm-256color'
fi

# Base styles and color palette
# Solarized colors
if [[ "$OSTYPE" == darwin* ]]; then
  # OS X
  # https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized
  BOLD=$(tput bold)
  RESET=$(tput sgr0)
  SOLAR_YELLOW=$(tput setaf 136)
  SOLAR_ORANGE=$(tput setaf 166)
  SOLAR_RED=$(tput setaf 124)
  SOLAR_MAGENTA=$(tput setaf 125)
  SOLAR_VIOLET=$(tput setaf 61)
  SOLAR_BLUE=$(tput setaf 33)
  SOLAR_CYAN=$(tput setaf 37)
  SOLAR_GREEN=$(tput setaf 64)
  SOLAR_WHITE=$(tput setaf 254)
elif [[ "$OSTYPE" == msys* ]]; then
  # Windows
  # https://github.com/stevenharman/console2-solarized
  BOLD="\033[1m"
  RESET="\033[m"
  SOLAR_YELLOW="\033[0;33m"
  SOLAR_ORANGE="\033[1;31m"
  SOLAR_RED="\033[0;31m"
  SOLAR_MAGENTA="\033[0;35m"
  SOLAR_VIOLET="\033[1;35m"
  SOLAR_BLUE="\033[0;34m"
  SOLAR_CYAN="\033[0;36m"
  SOLAR_GREEN="\033[0;32m"
  SOLAR_WHITE="\033[1;37m"
fi

style_user="\[${RESET}${SOLAR_ORANGE}\]"
style_host="\[${RESET}${SOLAR_YELLOW}\]"
style_path="\[${RESET}${SOLAR_GREEN}\]"
style_chars="\[${RESET}${SOLAR_WHITE}\]"
style_branch="${SOLAR_CYAN}"

if [[ "$SSH_TTY" ]]; then
  # Connected via ssh
  style_host="\[${BOLD}${SOLAR_RED}\]"
elif [[ "$USER" == "root" ]]; then
  # Logged in as root
  style_user="\[${BOLD}${SOLAR_RED}\]"
fi

# Test whether we're in a git repo
is_git_repo() {
  git rev-parse --is-inside-work-tree &> /dev/null
}

# Get the branch name
get_git_branch() {
  local branch_name

  # Get the short symbolic ref
  branch_name=$(git symbolic-ref --quiet --short HEAD 2> /dev/null) ||
  # If HEAD isn't a symbolic ref, get the short SHA
  branch_name=$(git rev-parse --short HEAD 2> /dev/null) ||
  # Otherwise, just give up
  branch_name="(unknown)"

  echo $branch_name
}

# Git status information
# Adapted from: https://github.com/necolas/dotfiles/
function prompt_git() {
  local git_info git_state uc us ut st

  if ! is_git_repo; then
    return 1
  fi

  git_info=$(get_git_branch)

  # Check for uncommitted changes in the index
  if ! `git diff --quiet --ignore-submodules --cached`; then
    uc="+"
  fi

  # Check for unstaged changes
  if ! `git diff-files --quiet --ignore-submodules --`; then
    us="!"
  fi

  # Check for untracked files
  if [ -n "$(git ls-files --others --exclude-standard)" ]; then
    ut="?"
  fi

  # Check for stashed files
  if `git rev-parse --verify refs/stash &>/dev/null`; then
    st="$"
  fi

  git_state=$uc$us$ut$st

  # Combine the branch name and state information
  if [[ $git_state ]]; then
      git_info="$git_info[$git_state]"
  fi

  echo -ne "${SOLAR_WHITE} on ${style_branch}${git_info}"
}

# Build the prompt
PS1="\n" # Newline
PS1+="${style_user}\u" # Username
PS1+="${style_chars}@" # @
PS1+="${style_host}\h" # Host
PS1+="${style_chars}: " # :
PS1+="${style_path}\w" # Working directory
PS1+="\$(prompt_git)" # Git details
PS1+="\n" # Newline
PS1+="${style_chars}\$ \[${RESET}\]" # $ (and reset color)
