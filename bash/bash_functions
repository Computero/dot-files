#!/bin/bash

# functions

# Create a new directory and enter it
function md() {
  mkdir -p "$@" && cd "$@"
}

# Find shorthand
function f() {
  find . -name "$1"
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* *
  fi
}

# Show dirs in $PATH
function path() {
  echo $PATH | tr ":" "\n" | sort
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  # Get Python version
  local version=$(python -c $'import sys;\nprint (sys.version_info[0])')

  # Get port (if specified)
  local port="${1:-8000}"

  # Open in the browser
  if [[ $OSTYPE == darwin* ]]; then
    open "http://localhost:${port}/"
  elif [[ $OSTYPE == msys* ]]; then
    start "http://localhost:${port}/"
  fi

  if [[ $version == 2 ]]; then
    # Set the default Content-Type to `text/plain` instead of
    # `application/octet-stream`.
    python -c $'import SimpleHTTPServer;\nSimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map[""] = "text/plain";\nSimpleHTTPServer.test();' "$port"
  elif [[ $version == 3 ]]; then
    python -m http.server "$port"
  fi
}

# Compare original and gzipped file size
function gz() {
  local origsize=$(wc -c < "$1")
  local gzipsize=$(gzip -c "$1" | wc -c)
  local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l)
  printf "orig: %d bytes\n" "$origsize"
  printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Take this repo and copy it to somewhere else minus the .git stuff.
function gitexport(){
  mkdir -p "$1"
  git archive master | tar -x -C "$1"
}
