#!/bin/bash
# Sublime Text 3 preferences

run_subl() {
    SUBLIME_DOTFILES="${DOTFILES_DIRECTORY}/subl"
    if is_os 'darwin'; then
        SUBLIME_DIRECTORY="${HOME}/Library/Application Support/Sublime Text 3/Packages"
    elif is_os 'linux'; then
        SUBLIME_DIRECTORY="${HOME}/.config/sublime-text-3/Packages"
    elif is_os 'msys'; then
        SUBLIME_DIRECTORY="${APPDATA}/Sublime Text 3/Packages"
    fi
    SUBLIME_USER_DIRECTORY="${SUBLIME_DIRECTORY}/User"

    log_header "Writing Sublime Text 3 preferences..."
    # If the User directory exists, remove it
    if [[ -d "${SUBLIME_USER_DIRECTORY}" ]]; then
        rm -rf "${SUBLIME_USER_DIRECTORY}"
    fi
    # Symlink the folder
    ln -fs "${SUBLIME_DOTFILES}" "${SUBLIME_USER_DIRECTORY}"

    # Create CLI symlink
    if is_os 'darwin'; then
        ln -s "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" "${DOTFILES_DIRECTORY}/bin/slt"
    elif is_os 'linux'; then
        ln -s "/usr/bin/subl" "${DOTFILES_DIRECTORY}/bin/slt"
    elif is_os 'msys'; then
tee <<EOF > ${DOTFILES_DIRECTORY}/bin/slt
"${PROGRAMFILES}/Sublime Text 3/sublime_text.exe" "\$@"
EOF
    fi
    [[ $? ]] && log_success "Done"

    if [[ ! ${no_packages} ]]; then
        log_header "Installing Sublime Text 3 packages..."
        local -a packages=(
            "https://github.com/emmetio/sublime-tern.git TernJS"
            "https://github.com/tednaleid/sublime-EasyMotion.git --branch st3 EasyMotion"
            "https://github.com/SublimeLinter/SublimeLinter.git --branch sublime-text-3 SublimeLinter"
        )

        for index in ${!packages[*]}
        do
            PKG_DIRECTORY=$(echo ${packages[$index]} | awk '{ print $NF }')
            cd "${SUBLIME_DIRECTORY}"

            if [[ ! -d "${PKG_DIRECTORY}" ]]; then
                # If missing, clone the package
                git clone ${packages[$index]}
            else
                # If package exists, make sure it's up to date
                cd "${PKG_DIRECTORY}"
                git pull --rebase origin
            fi
        done

        [[ $? ]] && log_success "Done"
    fi
}
