#!/bin/bash

# dotfiles installation script

DOTFILES_DIRECTORY="${HOME}/.dotfiles"
DOTFILES_TARBALL_PATH="https://github.com/kevva/dotfiles/tarball/master"
DOTFILES_GIT_REMOTE="https://github.com/kevva/dotfiles"

# Download and extract the repository to the home directory if the directory
# is missing
if [[ ! -d ${DOTFILES_DIRECTORY} ]] ; then
  printf "\n\033[1;37mDownloading dotfiles...\033[m\n"
  # Make .dotfiles directory in home
  mkdir ${DOTFILES_DIRECTORY}
  # Use curl to get the tarball of the github repository
  curl -fsSLo ${HOME}/dotfiles.tar.gz ${DOTFILES_TARBALL_PATH}
  # Extract to our .dotfiles directory
  tar -zxvf ${HOME}/dotfiles.tar.gz --strip-components 1 -C ${DOTFILES_DIRECTORY}
  # Remove the tarball
  rm -rf ${HOME}/dotfiles.tar.gz
fi

cd ${DOTFILES_DIRECTORY}

source ./lib/help
source ./lib/utils
source ./lib/brew
source ./lib/npm

# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]] ; then
  run_help
  exit
fi

# Test for known flags
for opt in $@
do
  case $opt in
    --no-packages) no_packages=true ;;
    --no-sync) no_sync=true ;;
    -*|--*) e_warning "Warning: invalid option $opt" ;;
  esac
done

# Before relying on Homebrew, check that packages can be compiled (OS X)
if os_is 'darwin'; then
  if ! type_exists 'gcc'; then
    e_error "The XCode Command Line Tools must be installed first."
    printf "  https://developer.apple.com/downloads\n"
    exit 1
  fi
fi

# Check for git
if ! type_exists 'git'; then
  # Install git through Homebrew (OS X)
  if os_is 'darwin'; then
    e_header "Updating Homebrew..."
    brew update
    e_header "Installing Git..."
    brew install git
  # Give installation instructions (Windows)
  elif os_is 'msys'; then
    e_error "Git must be installed first."
    printf "http://msysgit.github.com\n"
    exit 1
  fi
fi

# Initialize git repository
if ! is_git_repo; then
  e_header "Initializing git repository..."
  git init
  git remote add origin ${DOTFILES_GIT_REMOTE}
  git fetch origin master
  # Reset the index and working tree to the fetched HEAD
  git reset --hard FETCH_HEAD
  # Remove untracked files
  git clean -fd
fi

# Conditionally sync with the remote repository
if [[ $no_sync ]] ; then
  printf "Skipped dotfiles sync.\n"
else
  e_header "Syncing dotfiles..."
  # Pull down the latest changes
  git pull --rebase origin master
  # Return to previous working directory
fi

# Conditionally install and update packages
if [[ $no_packages ]] ; then
  printf "Skipped package installations.\n"
else
  printf "Updating packages...\n"
  # Install Homebrew formulae (OS X)
  if os_is 'darwin'; then
    run_brew
  fi
  # Install Node packages
  run_npm
fi

link() {
  # Force create/replace the symlink
  ln -fs "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
}

mirrorfiles() {
  # Copy `.gitconfig`
  # Any global git commands in `~/.bash_profile.local` will be written to
  # `.gitconfig`. This prevents them being committed to the repository.
  cp -av ${DOTFILES_DIRECTORY}/git/gitconfig  ${HOME}/.gitconfig

  # Create the necessary symbolic links between the `.dotfiles` and `HOME`
  # directory. The `bash_profile` sources other files directly from the
  # `.dotfiles` repository.
  link "bash/bashrc"        ".bashrc"
  link "bash/bash_profile"  ".bash_profile"
  link "bash/inputrc"       ".inputrc"
  link "git/gitattributes"  ".gitattributes"
  link "git/gitignore"      ".gitignore"

  e_success "Dotfiles update complete!"
}

# Verify that the user wants to proceed before potentially overwriting files
printf "\n"
e_warning "Warning: This may overwrite your existing dotfiles."
read -p "Continue? (y/n) " -n 1
printf "\n"

if [[ $REPLY == y ]] ; then
  mirrorfiles
  source ${HOME}/.bash_profile
else
  printf "Aborting...\n"
  exit 1
fi
