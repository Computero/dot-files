#!/bin/bash
# dotfiles installation script

DOTFILES_DIRECTORY="${HOME}/.dotfiles"
DOTFILES_GIT_REMOTE="https://github.com/kevva/dotfiles"

# If missing, download and extract the dotfiles repository
if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
    if [[ $(type -P tput) ]]; then
        printf "$(tput setaf 7)Downloading dotfiles...$(tput sgr0)\n"
    else
        printf "\033[1;37mDownloading dotfiles...\033[m\n"
    fi
    mkdir ${DOTFILES_DIRECTORY}
    curl -fsSL ${DOTFILES_GIT_REMOTE}/tarball/master | tar -xzC ${DOTFILES_DIRECTORY} --strip-components 1
fi

# Source lib files
cd ${DOTFILES_DIRECTORY}
source ./lib/help
source ./lib/list
source ./lib/utils
if is_os 'darwin'; then
    source ./lib/brew
elif is_os 'linux'; then
    source ./lib/apt
fi
source ./lib/npm
source ./lib/subl

# Help screen
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    run_help
    exit
fi

# Additional programs list screen
if [[ "$1" == "-l" || "$1" == "--list" ]]; then
    run_list
    exit
fi

# Test for known flags
for opt in $@
do
    case ${opt} in
        -np|--no-packages) no_packages=true ;;
        -ns|--no-sync) no_sync=true ;;
        -*|--*) log_warning "Warning: invalid option ${opt}" ;;
    esac
done

# Before relying on Homebrew, check that packages can be compiled
if is_os 'darwin' && ! type_exists 'gcc'; then
    log_error "The XCode Command Line Tools must be installed first"
    printf "  Download them from: https://developer.apple.com/downloads\n"
    printf "  Then run: bash ~/.dotfiles/bin/dotfiles\n"
    exit 1
fi

# Check for Homebrew
if is_os 'darwin' && ! type_exists 'brew'; then
    log_header "Installing Homebrew..."
    ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
fi

# Check for git
if is_os 'darwin' && ! type_exists 'git'; then
    log_header "Updating Homebrew..."
    brew update
    log_header "Installing Git..."
    brew install git
elif is_os 'linux' && ! type_exists 'git'; then
    log_header "Installing Git..."
    sudo apt-get -qq install git-core
elif ! is_os 'linux' && ! is_os 'darwin' && ! type_exists 'git'; then
    log_error "Git for Windows must be installed first"
    printf "  Download it from: http://msysgit.github.io/\n"
    printf "  Then run: bash ~/.dotfiles/bin/dotfiles\n"
    exit 1
fi

# Initialize the git repository if it's missing
if ! is_git_repo; then
    log_header "Initializing git repository..."
    git init
    git remote add origin ${DOTFILES_GIT_REMOTE}
    git fetch origin master
    # Reset the index and working tree to the fetched HEAD
    # (submodules are cloned in the subsequent sync step)
    git reset --hard FETCH_HEAD
    # Remove any untracked files
    git clean -fd
fi

# Conditionally sync with the remote repository
if [[ ${no_sync} ]]; then
    printf "Skipped dotfiles sync.\n"
else
    log_header "Syncing dotfiles..."
    git pull --rebase origin master
    git submodule update --recursive --init --quiet
fi

# Install and update packages
if [[ ${no_packages} ]]; then
    printf "Skipped package installations.\n"
else
    printf "Updating packages...\n"
    if is_os 'darwin'; then
        run_brew
    elif is_os 'linux'; then
        run_apt
    fi
    run_npm
fi

# Force create/replace symlink
link() {
    ln -fs "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
}

mirrorfiles() {
    # Copy `.gitconfig`.
    # Any global git commands in `~/.bash_profile.local` will be written to
    # `.gitconfig`. This prevents them being committed to the repository.
    if type_exists 'rsync'; then
        rsync -avz --quiet ${DOTFILES_DIRECTORY}/git/gitconfig  ${HOME}/.gitconfig
    else
        cp -av ${DOTFILES_DIRECTORY}/git/gitconfig  ${HOME}/.gitconfig
    fi

    # Create the necessary symbolic links between the `.dotfiles` and `HOME`
    # directory. The `bash_profile` sources other files directly from the
    # `.dotfiles` repository.
    link "bash/bashrc"        ".bashrc"
    link "bash/bash_profile"  ".bash_profile"
    link "bash/inputrc"       ".inputrc"
    link "git/gitattributes"  ".gitattributes"
    link "git/gitignore"      ".gitignore"

    log_success "Dotfiles update complete!"
}

if [[ ! ${no_sync} ]]; then
    # Ask before potentially overwriting files
    seek_confirmation "Warning: This step may overwrite your existing dotfiles."

    if is_confirmed; then
        mirrorfiles
        source ${HOME}/.bash_profile
    else
        printf "Aborting...\n"
        exit 1
    fi
fi

# Ask before potentially overwriting Sublime Text 3 preferences
seek_confirmation "Warning: This step may overwrite your existing Sublime Text 3 preferences."

if is_confirmed; then
    run_subl
else
    printf "Skipped installing Sublime Text 3 preferences.\n"
fi

if is_os 'darwin'; then
    # Ask before potentially overwriting OS X defaults
    seek_confirmation "Warning: This step may modify your OS X system defaults."

    if is_confirmed; then
        bash ./bin/osxdefaults
        log_success "OS X settings updated! You may need to restart."
    else
        printf "Skipped OS X settings update.\n"
    fi
fi
