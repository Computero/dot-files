[alias]
  # https://git.wiki.kernel.org/articles/a/l/i/Aliases.html

  # `git remote prune origin`: remove remote-tracking branches that were deleted from the remote repo
  # `git gc`: cleanup unnecessary files and optimize the local repository
  # `git clean -df`: remove untracked files and directories from the working tree
  # `git stash clear`: remove all stashed states
  trim = !git remote prune origin && git gc
  cleanup = !git clean -df && git stash clear

  # Add untracked, remove deleted, and show status
  a = !git add -A && git status

  # Commit selected changes
  ca = !git add $1 && git commit -v

  # Commit all changes
  caa = !git add -A && git commit -av

  # Show status in short format
  s = status -s

  # Switch to a branch
  co = checkout

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"

  # Shows the diff between the state `$number` revisions ago and the current
  # state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # View the SHA, description, and history graph
  l = log --pretty=nice --date-order --graph --all

  # Clone a repository including all submodules
  c = clone --recursive

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"

  # Fetch a repository ($1) and checkout its ref ($2) HEAD
  br = !bash -c 'git fetch "$1" "$2" && git checkout FETCH_HEAD' -

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Display the number of commits per author in numerical order
  who = shortlog -sn --

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Undo a `git push`
  undopush = push -f origin HEAD^:master

  # Undo a `git commit`
  undocommit = reset --hard HEAD^

[color]
  # color opts: normal, black, red, green, yellow, blue, magenta, cyan, or white
  ui = auto
  interactive = auto

[core]
  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

[diff]
  tool = mvimdiff

[difftool]
  prompt = false

[pretty]
  # Results in <short-sha> <commit-message> (<pointer-names>) -- <commit-author-name>; <relative-time>
  nice = "%C(yellow)%h%C(reset) %C(white)%s%C(cyan)%d%C(reset) -- %an; %ar"

# Use `origin` as the default remote on the `master` branch in all cases
[branch "master"]
  remote = origin
  merge = refs/heads/master

[push]
  default = simple
